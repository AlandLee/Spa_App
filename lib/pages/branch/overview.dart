import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:spa_app/pages/branch/appointment_dialog.dart';

class MainContent extends StatefulWidget {
  final Map<String, dynamic> branch;
  final Map<String, dynamic>? userData;

  const MainContent({
    Key? key,
    required this.branch,
    required this.userData,
  }) : super(key: key);

  @override
  State<MainContent> createState() => _MainContentState();
}

class _MainContentState extends State<MainContent> {
  List<Map<String, String>> schedules = [
    {
      'id': '1',
      'entity_id': 'kh1', // M√£ ƒë·ªëi t∆∞·ª£ng
      'name': 'M·∫´u 1',
      'phone': '0909xxxx',
      'rank': 'V√†ng',
      'date': '2025-04-10',
      'hour': '10:30 AM',
      'note': 'Kh√°ch y√™u c·∫ßu gi·∫£m gi√°',
      'service': 'D·ªãch v·ª• 1',
      'status': 'ƒê√£ ho√†n th√†nh',
      'productList': '[{"productName": "S·∫£n ph·∫©m 1", "code": "1"}, {"productName": "S·∫£n ph·∫©m 2", "code": "2"}]',
    },
    {
      'id': '2',
      'entity_id': 'kh2', // M√£ ƒë·ªëi t∆∞·ª£ng
      'name': 'M·∫´u 2',
      'phone': '0908yyyy',
      'rank': 'B·∫°c',
      'date': '2025-04-12',
      'hour': '02:00 PM',
      'note': 'Kh√°ch y√™u c·∫ßu giao h√†ng nhanh',
      'service': 'D·ªãch v·ª• 2',
      'status': 'Ch∆∞a x√°c nh·∫≠n',
      'productList': '[{"productName": "S·∫£n ph·∫©m 3", "code": "3"}, {"productName": "S·∫£n ph·∫©m 4", "code": "4"}]',
    },
    {
      'id': '3',
      'entity_id': 'kh3', // M√£ ƒë·ªëi t∆∞·ª£ng
      'name': 'M·∫´u 3',
      'phone': '0907zzzz',
      'rank': 'V√†ng',
      'date': '2025-04-15',
      'hour': '09:00 AM',
      'note': 'Kh√°ch y√™u c·∫ßu thay ƒë·ªïi ng√†y',
      'service': 'D·ªãch v·ª• 3',
      'status': 'ƒê√£ ho√†n th√†nh',
      'productList': '[{"productName": "S·∫£n ph·∫©m 5", "code": "5"}, {"productName": "S·∫£n ph·∫©m 6", "code": "6"}]',
    },
    {
      'id': '4',
      'entity_id': 'kh4', // M√£ ƒë·ªëi t∆∞·ª£ng
      'name': 'M·∫´u 4',
      'phone': '0906aaaa',
      'rank': 'B·∫°c',
      'date': '2025-04-20',
      'hour': '11:15 AM',
      'note': 'Kh√°ch y√™u c·∫ßu th√™m s·∫£n ph·∫©m',
      'service': 'D·ªãch v·ª• 4',
      'status': 'ƒêang th·ª±c hi·ªán',
      'productList': '[{"productName": "S·∫£n ph·∫©m 7", "code": "7"}, {"productName": "S·∫£n ph·∫©m 8", "code": "8"}]',
    },
  ];

  String searchScheduleName = '';
  String searchStudentName = '';
  Set<int> selectedRows = {}; // D·ª±a theo index
  List<Map<String, String>> filteredSchedules = [];

  List<Map<String, String>> students = [
  {
    'id': '1',
    'name': 'Nguy·ªÖn VƒÉn A',
    'class': 'Yoga c∆° b·∫£n',
    'date': '2025-04-20',
    'hour': '08:00 AM',
  },
  {
    'id': '2',
    'name': 'Tr·∫ßn Th·ªã B',
    'class': 'Zumba n√¢ng cao',
    'date': '2025-04-21',
    'hour': '09:30 AM',
  },
  {
    'id': '3',
    'name': 'L√™ VƒÉn C',
    'class': 'Kickfit',
    'date': '2025-04-22',
    'hour': '06:00 PM',
  },
  {
    'id': '4',
    'name': 'L√™ VƒÉn D',
    'class': 'Kickfit',
    'date': '2025-04-22',
    'hour': '06:00 PM',
  },
];

List<Map<String, String>> filteredStudents = [];

@override
void initState() {
  super.initState();
  print('üìç Branch data: ${widget.branch}');
}




  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;

    return Stack(
      children: [
        Positioned(
          top: 0,
          left: 0,
          child: Container(
            width: screenSize.width,
            height: screenSize.height,
            child: Image.asset(
              'images/bg_spa_none.png',
              fit: BoxFit.contain,
            ),
          ),
        ),
        Positioned(
          top: -24,
          right: -40,
          child: Image.asset(
            'images/logo_spa_none.png',
            width: screenSize.width * 0.55,
            height: screenSize.height * 0.55,
            fit: BoxFit.contain,
          ),
        ),
        Positioned.fill(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  width: 530,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text('T·ª´ ng√†y: 01/01/2025', style: TextStyle(fontSize: 16)),
                          Text('ƒê·∫øn ng√†y: 31/12/2025', style: TextStyle(fontSize: 16)),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          _statBox('12', 'L·ªõp h·ªçc', Colors.orange, Icons.class_),
                          _statBox('100', 'Kh√°ch h√†ng', Colors.blue, Icons.people),
                          _statBox('140', 'H·ªçc vi√™n', Colors.purple, Icons.school),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          _summaryBox(
                            title: 'T·ªïng thu',
                            current: '+56.000.000',
                            previous: '+50.000.000',
                            growth: '+?',
                            color: Colors.green,
                            icon: Icons.attach_money,
                          ),
                          _summaryBox(
                            title: 'T·ªïng chi',
                            current: '-6.000.000',
                            previous: '-5.000.000',
                            growth: '-?',
                            color: Colors.red,
                            icon: Icons.money_off,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 24),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (widget.branch['type'] == 'spa' || widget.branch['type'] == 'warehouse') // Spa v√† T·ªïng kho ƒë·ªÅu hi·ªÉn th·ªã l·ªãch kh√°ch h√†ng
                      Flexible(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            const Padding(
                              padding: EdgeInsets.symmetric(vertical: 8),
                              child: Text(
                                'L·ªãch Kh√°ch H√†ng',
                                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                              ),
                            ),
                            _buildScheduleTable(context),
                          ],
                        ),
                      ),
                    if (widget.branch['type'] == 'warehouse') const SizedBox(width: 16), // Kho·∫£ng c√°ch n·∫øu c√≥ c·∫£ 2 b·∫£ng
                    if (widget.branch['type'] == 'class' || widget.branch['type'] == 'warehouse') // L·ªõp h·ªçc v√† T·ªïng kho ƒë·ªÅu hi·ªÉn th·ªã l·ªãch h·ªçc vi√™n
                      Flexible(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            const Padding(
                              padding: EdgeInsets.symmetric(vertical: 8),
                              child: Text(
                                'L·ªãch H·ªçc Vi√™n',
                                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                              ),
                            ),
                            _buildStudentTable(context),
                          ],
                        ),
                      ),
                  ],
                )
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _statBox(String value, String label, Color color, IconData icon) {
  return Container(
    width: 140,  // TƒÉng chi·ªÅu r·ªông c·ªßa container
    height: 100,  // TƒÉng chi·ªÅu cao c·ªßa container
    decoration: BoxDecoration(
      color: color.withOpacity(0.1),
      borderRadius: BorderRadius.circular(8),
      border: Border.all(color: color, width: 2),  // TƒÉng ƒë·ªô d√†y c·ªßa vi·ªÅn
    ),
    child: Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        // Th√™m Row ƒë·ªÉ k·∫øt h·ª£p Icon v√† Text
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 24, color: color),  // Th√™m icon
            const SizedBox(width: 8),  // Kho·∫£ng c√°ch gi·ªØa icon v√† gi√° tr·ªã
            Text(
              value, 
              style: TextStyle(
                fontSize: 28,  // TƒÉng k√≠ch th∆∞·ªõc font c·ªßa gi√° tr·ªã
                color: color, 
                fontWeight: FontWeight.bold
              ),
            ),
          ],
        ),
        Text(
          label, 
          style: TextStyle(
            color: color, 
            fontSize: 16,  // TƒÉng k√≠ch th∆∞·ªõc font c·ªßa nh√£n
          ),
        ),
      ],
    ),
  );
}



  Widget _summaryBox({
  required String title,
  required String current,
  required String previous,
  required String growth,
  required Color color,
  required IconData icon, // Th√™m icon
}) {
  return Container(
    width: 260,
    padding: const EdgeInsets.all(20),
    decoration: BoxDecoration(
      color: color.withOpacity(0.1),
      borderRadius: BorderRadius.circular(8),
      border: Border.all(color: color, width: 2),
    ),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Icon(icon, color: color, size: 26),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                title,
                style: TextStyle(
                  color: color,
                  fontWeight: FontWeight.bold,
                  fontSize: 22,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        Text(
          'K√¨ n√†y: $current',
          style: TextStyle(color: color, fontSize: 18),
        ),
        Text(
          'K√¨ tr∆∞·ªõc: $previous',
          style: TextStyle(color: color, fontSize: 18),
        ),
        Text(
          'TƒÉng tr∆∞·ªüng: $growth',
          style: TextStyle(color: color, fontSize: 18),
        ),
      ],
    ),
  );
}




// B·∫£ng l·ªãch h·∫πn ƒë∆°n gi·∫£n
Widget _buildScheduleTable(BuildContext context) {
  final currentList = searchScheduleName.isEmpty ? schedules : filteredSchedules;
  final headers = ['Kh√°ch h√†ng', 'D·ªãch v·ª•', 'Ng√†y/Gi·ªù', 'T√¨nh tr·∫°ng'];

  return Padding(
    padding: const EdgeInsets.all(0.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // üîò H√†ng n√∫t b·∫•m
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Row(
            children: [
              // √î t√¨m ki·∫øm
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: TextField(
                    decoration: InputDecoration(
                      hintText: 'T√¨m theo t√™n kh√°ch h√†ng...',
                      prefixIcon: const Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                      contentPadding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                      isDense: true,
                    ),
                    onChanged: (value) {
                      setState(() {
                        searchScheduleName = value;
                        filteredSchedules = schedules
                            .where((schedule) => (schedule['name'] ?? '')
                                .toLowerCase()
                                .contains(value.toLowerCase()))
                            .toList();
                      });
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "Th√™m m·ªõi"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.add, size: 20),
                    label: const Text('Th√™m m·ªõi', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      showDialog(
                        context: context,
                        builder: (context) {
                          return Dialog(
                            insetPadding: const EdgeInsets.all(24),
                            backgroundColor: Colors.transparent,
                            child: UnconstrainedBox(
                              constrainedAxis: Axis.horizontal,
                              child: ConstrainedBox(
                                constraints: BoxConstraints(
                                  maxWidth: MediaQuery.of(context).size.width * 2 / 3,
                                  maxHeight: MediaQuery.of(context).size.height * 0.8,
                                ),
                                child: AppointmentFormDialog(
                                  branch: widget.branch,
                                  userData: widget.userData,
                                ),
                              ),
                            ),
                          );
                        },
                      );
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "Xu·∫•t Excel"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.file_download, size: 20),
                    label: const Text('Xu·∫•t Excel', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      print('üßæ ƒêang xu·∫•t Excel...');
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "L√†m m·ªõi"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.refresh, size: 20),
                    label: const Text('L√†m m·ªõi', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      setState(() {
                        searchScheduleName = '';
                        filteredSchedules.clear();
                      });
                    },
                  ),
                ),
              ),
            ],
          ),

        ),

        // üìã Ti√™u ƒë·ªÅ b·∫£ng
        Table(
          columnWidths: {
            for (int i = 0; i < headers.length; i++) i: FlexColumnWidth(1),
          },
          border: TableBorder.all(
            color: Colors.black26,
            width: 1,
            borderRadius: BorderRadius.circular(0),
          ),
          children: [
            TableRow(
              decoration: const BoxDecoration(color: Color(0xFFCCE5FF)),
              children: headers.map((h) => _buildTableHeaderCell(h)).toList(),
            ),
          ],
        ),

        // üì¶ D·ªØ li·ªáu
        ...currentList.map((schedule) {
          final productListString = schedule['productList'] ?? '';
          String productNames = '';

          try {
            final decoded = jsonDecode(productListString);
            if (decoded is List) {
              productNames = decoded.map((e) => e['productName'] ?? '').join(' - ');
            }
          } catch (_) {}

          final dateTime = '${schedule['date'] ?? ''} - ${schedule['hour'] ?? ''}';

          return InkWell(
            onTap: () {
              showDialog(
                context: context,
                builder: (context) {
                  return Dialog(
                    insetPadding: const EdgeInsets.all(24),
                    backgroundColor: Colors.transparent,
                    child: UnconstrainedBox(
                      constrainedAxis: Axis.horizontal,
                      child: ConstrainedBox(
                        constraints: BoxConstraints(
                          maxWidth: MediaQuery.of(context).size.width * 2 / 3,
                          maxHeight: MediaQuery.of(context).size.height * 0.8,
                        ),
                        child: AppointmentFormDialog(
                          branch: widget.branch,
                          userData: widget.userData,
                          schedule: schedule,
                        ),
                      ),
                    ),
                  );
                },
              );
            },
            child: Table(
              columnWidths: {
                for (int i = 0; i < headers.length; i++) i: FlexColumnWidth(1),
              },
              border: TableBorder.all(
                color: Colors.black26,
                width: 0.5,
              ),
              children: [
                TableRow(
                  decoration: const BoxDecoration(color: Colors.white),
                  children: [
                    _buildTableCell(schedule['name'] ?? ''),
                    _buildTableCell(productNames),
                    _buildTableCell(dateTime),
                    _buildTableCell(schedule['status'] ?? ''),
                  ],
                ),
              ],
            ),
          );
        }).toList(),
      ],
    ),
  );
}



Widget _buildStudentTable(BuildContext context) {
  final headers = ['H·ªçc vi√™n', 'L·ªõp h·ªçc', 'Ng√†y/Gi·ªù'];
  final currentList = searchStudentName.isEmpty ? students : filteredStudents;

  return Padding(
    padding: const EdgeInsets.all(0.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // üîò H√†ng n√∫t v√† t√¨m ki·∫øm
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Row(
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: TextField(
                    decoration: InputDecoration(
                      hintText: 'T√¨m h·ªçc vi√™n...',
                      prefixIcon: const Icon(Icons.search),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                      contentPadding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                      isDense: true,
                    ),
                    onChanged: (value) {
                      setState(() {
                        searchStudentName = value;
                        filteredStudents = students
                            .where((student) => (student['name'] ?? '')
                                .toLowerCase()
                                .contains(value.toLowerCase()))
                            .toList();
                      });
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "Th√™m m·ªõi"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.add, size: 20),
                    label: const Text('Th√™m m·ªõi', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      showDialog(
                        context: context,
                        builder: (context) {
                          return Dialog(
                            insetPadding: const EdgeInsets.all(24),
                            backgroundColor: Colors.transparent,
                            child: UnconstrainedBox(
                              constrainedAxis: Axis.horizontal,
                              child: ConstrainedBox(
                                constraints: BoxConstraints(
                                  maxWidth: MediaQuery.of(context).size.width * 2 / 3,
                                  maxHeight: MediaQuery.of(context).size.height * 0.8,
                                ),
                                child: AppointmentFormDialog(
                                  branch: widget.branch,
                                  userData: widget.userData,
                                ),
                              ),
                            ),
                          );
                        },
                      );
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "Xu·∫•t Excel"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.file_download, size: 20),
                    label: const Text('Xu·∫•t Excel', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      print('üßæ ƒêang xu·∫•t Excel h·ªçc vi√™n...');
                    },
                  ),
                ),
              ),
              const SizedBox(width: 12),
              // N√∫t "L√†m m·ªõi"
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.only(right: 8.0),
                  child: ElevatedButton.icon(
                    icon: const Icon(Icons.refresh, size: 20),
                    label: const Text('L√†m m·ªõi', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      elevation: 5,
                    ),
                    onPressed: () {
                      setState(() {
                        searchStudentName = '';
                        filteredStudents.clear();
                      });
                    },
                  ),
                ),
              ),
            ],
          ),

        ),

        // üìã Ti√™u ƒë·ªÅ b·∫£ng
        Table(
          columnWidths: {
            for (int i = 0; i < headers.length; i++) i: const FlexColumnWidth(1),
          },
          border: TableBorder.all(
            color: Colors.black26,
            width: 1,
            borderRadius: BorderRadius.circular(0),
          ),
          children: [
            TableRow(
              decoration: const BoxDecoration(color: Color(0xFFCCE5FF)),
              children: headers.map((h) => _buildTableHeaderCell(h)).toList(),
            ),
          ],
        ),

        // üì¶ D·ªØ li·ªáu h·ªçc vi√™n
        ...currentList.map((student) {
          final dateTime = '${student['date'] ?? ''} - ${student['hour'] ?? ''}';

          return InkWell(
            onTap: () {
              // TODO: Dialog chi ti·∫øt h·ªçc vi√™n
            },
            child: Table(
              columnWidths: {
                for (int i = 0; i < headers.length; i++) i: const FlexColumnWidth(1),
              },
              border: TableBorder.all(
                color: Colors.black26,
                width: 0.5,
              ),
              children: [
                TableRow(
                  decoration: const BoxDecoration(color: Colors.white),
                  children: [
                    _buildTableCell(student['name'] ?? ''),
                    _buildTableCell(student['class'] ?? ''),
                    _buildTableCell(dateTime),
                  ],
                ),
              ],
            ),
          );
        }).toList(),
      ],
    ),
  );
}







Widget _buildTableHeaderCell(String text) {
  return Container(
    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
    child: Text(
      text,
      style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16, color: Colors.black87),
    ),
  );
}

Widget _buildTableCell(String text) {
  return Container(
    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
    child: Text(
      text,
      style: const TextStyle(fontSize: 14, color: Colors.black87),
    ),
  );
}
}
