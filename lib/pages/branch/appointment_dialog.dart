import 'package:flutter/material.dart';
import 'dart:convert';

class AppointmentFormDialog extends StatefulWidget {
  final Map<String, dynamic> branch;
  final Map<String, dynamic>? userData;
  final Map<String, String>? schedule; // üëà Th√™m d√≤ng n√†y

  AppointmentFormDialog({
    super.key,
    required this.branch,
    required this.userData,
    this.schedule, // üëà V√† d√≤ng n√†y n·ªØa
  });


  @override
  State<AppointmentFormDialog> createState() => _AppointmentFormDialogState();
}

class _AppointmentFormDialogState extends State<AppointmentFormDialog> {
  final TextEditingController _orderDateController = TextEditingController();     // Ng√†y h·∫πn
  final TextEditingController _hourController = TextEditingController();          // Gi·ªù
  final TextEditingController _scheduleIdController = TextEditingController();    // S·ªë (m√£ phi·∫øu)

  final TextEditingController _branchController = TextEditingController();        // Chi nh√°nh
  final TextEditingController _statusController = TextEditingController();        // Tr·∫°ng th√°i

  final TextEditingController _customerIdController = TextEditingController();    // M√£ KH
  final TextEditingController _customerNameController = TextEditingController();  // T√™n KH
  final TextEditingController _phoneController = TextEditingController();         // SƒêT
  final TextEditingController _noteController = TextEditingController();          // Ghi ch√∫
  List<String> productCodes = [];
  late Map<String, String> _localSchedule;
  final List<Map<String, String>> services = [
    {'id': '1', 'name': 'Massage Th∆∞ Gi√£n To√†n Th√¢n'},
    {'id': '2', 'name': 'ChƒÉm S√≥c Da M·∫∑t C∆° B·∫£n'},
    {'id': '3', 'name': 'M·∫∑t N·∫° D∆∞·ª°ng ·∫®m'},
    {'id': '4', 'name': 'ChƒÉm S√≥c M·∫Øt Chuy√™n S√¢u'},
    {'id': '5', 'name': 'Massage Vai - C·ªï - L∆∞ng'},
    {'id': '6', 'name': 'X√¥ng H∆°i Th·∫£o D∆∞·ª£c'},
    {'id': '7', 'name': 'T·∫©y T·∫ø B√†o Ch·∫øt To√†n Th√¢n'},
    {'id': '8', 'name': 'ChƒÉm S√≥c Da M·∫∑t Chuy√™n S√¢u'},
    {'id': '9', 'name': 'Massage Th√°i'},
    {'id': '10', 'name': 'ChƒÉm S√≥c M√≥ng Tay - M√≥ng Ch√¢n'},
    {'id': '11', 'name': 'Ch·ªØa M·ª•n B·∫±ng C√¥ng Ngh·ªá Laser'},
    {'id': '12', 'name': 'ChƒÉm S√≥c Da M·∫∑t V·ªõi Vitamin C'},
    {'id': '13', 'name': 'Massage Ch√¢n'},
    {'id': '14', 'name': 'Tr·ªã Li·ªáu N√°m Da'},
    {'id': '15', 'name': 'L√†m S·∫°ch Da B·∫±ng C√¥ng Ngh·ªá Oxy Jet'},
    {'id': '16', 'name': 'ChƒÉm S√≥c Da B·∫±ng T·∫ø B√†o G·ªëc'},
    {'id': '17', 'name': 'ƒêi·ªÅu Tr·ªã Da Nh·∫°y C·∫£m'},
    {'id': '18', 'name': 'C·∫°o L√¥ng M·∫∑t'},
    {'id': '19', 'name': 'T·∫©y L√¥ng V√πng Bikini'},
    {'id': '20', 'name': 'ChƒÉm S√≥c Da Ch·ªëng L√£o H√≥a'},
    {'id': '21', 'name': 'Tr·ªã Li·ªáu M·ª•n C∆° B·∫£n'},
    {'id': '22', 'name': 'S·ª≠ D·ª•ng D·∫ßu Massage Aromatherapy'},
    {'id': '23', 'name': 'L√†m M·ªù V·∫øt Th√¢m B·∫±ng Laser'},
    {'id': '24', 'name': 'Tr·ªã Li·ªáu H√∫t M·ª°'},
    {'id': '25', 'name': 'ChƒÉm S√≥c Da M·∫∑t B·∫±ng Masage L·∫°nh'},
    {'id': '26', 'name': 'ChƒÉm S√≥c Da M·∫∑t B·∫±ng M√°y IPL'},
    {'id': '27', 'name': 'D·ªãch V·ª• T·∫©y Trang Chuy√™n S√¢u'},
    {'id': '28', 'name': 'ƒêi·ªÅu Tr·ªã Da ƒê·∫∑c Bi·ªát Cho Ph·ª• N·ªØ Mang Thai'},
    {'id': '29', 'name': 'Tr·ªã Li·ªáu TƒÉng C∆∞·ªùng Collagen'},
    {'id': '30', 'name': 'D·ªãch V·ª• Ph·ª•c H·ªìi Sau Ph·∫´u Thu·∫≠t'},
    {'id': '31', 'name': 'ChƒÉm S√≥c M·∫Øt Th∆∞ Gi√£n'},
    {'id': '32', 'name': 'D·ªãch V·ª• Gi·∫£m Stress V√† Lo √Çu'},
    {'id': '33', 'name': 'Tr·ªã Li·ªáu Tho√°i H√≥a C·ªôt S·ªëng'},
    {'id': '34', 'name': 'ChƒÉm S√≥c Da Cho Nam'},
    {'id': '35', 'name': 'L√†m M√≥ng Ch√¢n C∆° B·∫£n'},
    {'id': '36', 'name': 'ChƒÉm S√≥c M√≥ng Tay ƒê·∫∑c Bi·ªát'},
    {'id': '37', 'name': 'S·ª≠ D·ª•ng Kem D∆∞·ª°ng ·∫®m Da'},
    {'id': '38', 'name': 'S·ª≠ D·ª•ng Serum Ch·ªëng L√£o H√≥a'},
    {'id': '39', 'name': 'T·∫©y Da Ch·∫øt V·ªõi Mu·ªëi Bi·ªÉn'},
    {'id': '40', 'name': 'D·ªãch V·ª• T·∫Øm Tr·∫Øng To√†n Th√¢n'},
  ];

  List<bool> selected = List<bool>.filled(40, false);

  @override
  void initState() {
    super.initState();
    _localSchedule = Map<String, String>.from(widget.schedule ?? {});
    final s = widget.schedule;
    if (s != null) {
      _orderDateController.text = s['date'] ?? ''; // Ng√†y h·∫πn
      _hourController.text = s['hour'] ?? ''; // Gi·ªù
      _scheduleIdController.text = s['id'] ?? ''; // S·ªë phi·∫øu h·∫πn

      _branchController.text = widget.branch['name'] ?? ''; // Chi nh√°nh
      _statusController.text = s['status'] ?? ''; // Tr·∫°ng th√°i

      _customerIdController.text = s['entity_id'] ?? ''; // M√£ KH
      _customerNameController.text = s['name'] ?? ''; // T√™n KH
      _phoneController.text = s['phone'] ?? ''; // SƒêT
      _noteController.text = s['note'] ?? ''; // Ghi ch√∫
      productCodes = getProductCodes();
    }
    for (int i = 0; i < services.length; i++) {
      if (productCodes.contains(services[i]['id'])) {
        selected[i] = true;
      }
    }
  }

  Map<String, String> buildScheduleFromForm({
  required String branchName,
  required List<Map<String, String>> products,
}) {
  return {
    'id': _scheduleIdController.text,
    'entity_id': _customerIdController.text,
    'name': _customerNameController.text,
    'phone': _phoneController.text,
    'rank': '', // N·∫øu b·∫°n c√≥ rank, th√™m controller ho·∫∑c g√°n c·ª©ng
    'date': _orderDateController.text,
    'hour': _hourController.text,
    'note': _noteController.text,
    'service': '', // N·∫øu c√≥ field d·ªãch v·ª• th√¨ th√™m controller
    'status': _statusController.text,
    'productList': products.map((e) => {
      'productName': e['productName'] ?? '',
      'code': e['code'] ?? '',
    }).toList().toString(),
  };
}

List<Map<String, String>> getProductListFromSelected() {
  final selectedServices = <Map<String, String>>[];
  for (int i = 0; i < selected.length; i++) {
    if (selected[i]) {
      selectedServices.add({
        'productName': services[i]['name'] ?? '',
        'code': services[i]['id'] ?? '',
      });
    }
  }
  return selectedServices;
}

  @override
  void dispose() {
    _orderDateController.dispose();
    _hourController.dispose();
    _scheduleIdController.dispose();

    _branchController.dispose();
    _statusController.dispose();

    _customerIdController.dispose();
    _customerNameController.dispose();
    _phoneController.dispose();
    _noteController.dispose();

    super.dispose();
  }

  List<String> getProductCodes() {
  if (widget.schedule != null) {
    final schedule = widget.schedule!;
    if (schedule['productList'] != null) {
      // Gi·∫£i m√£ d·ªØ li·ªáu productList th√†nh List<Map<String, dynamic>>
      final List<Map<String, dynamic>> productList = List<Map<String, dynamic>>.from(json.decode(schedule['productList']!));

      // Tr√≠ch xu·∫•t danh s√°ch c√°c m√£ d·ªãch v·ª• (code)
      return productList.map((product) => product['code'] as String).toList();
    }
  }
  return [];
}


  @override
Widget build(BuildContext context) {
  final screenWidth = MediaQuery.of(context).size.width;

  return Center(
    child: SizedBox(
      width: screenWidth * 2 / 3,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Stack(
          children: [
            Container(color: const Color(0xFFE8F9FB)),
            Positioned.fill(
              child: Image.asset(
                'images/bg_spa_none.png',
                fit: BoxFit.cover,
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(top: 48, left: 16, right: 16, bottom: 16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // === H√†ng 1 ===
                  Row(
                    children: [
                      Expanded(child: _buildTextField(_orderDateController, 'Ng√†y h·∫πn')),
                      const SizedBox(width: 8),
                      Expanded(child: _buildTextField(_hourController, 'Gi·ªù')),
                      const SizedBox(width: 8),
                      Expanded(child: _buildTextField(_scheduleIdController, 'S·ªë')),
                      const SizedBox(width: 8),
                      _buildIconButton(Icons.save, () {
  final updatedSchedule = buildScheduleFromForm(
    branchName: widget.branch['name'] ?? '',
    products: getProductListFromSelected(),
  );

  setState(() {
    _localSchedule = updatedSchedule;
  });

  print("Updated Schedule: $_localSchedule");
})



                    ],
                  ),
                  const SizedBox(height: 8),

                  // === H√†ng 2 (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ schedule) ===
                  if (widget.schedule != null)
                    Row(
                      children: [
                        Expanded(child: _buildTextField(_branchController, 'Chi nh√°nh')),
                        const SizedBox(width: 8),
                        Expanded(child: _buildTextField(_statusController, 'Tr·∫°ng th√°i')),
                      ],
                    ),

                  const SizedBox(height: 12),

                  // === H√†ng 3: M√£ KH - T√™n - SƒêT ===
                  Row(
                    children: [
                      Expanded(child: _buildTextField(_customerIdController, 'M√£ kh√°ch h√†ng')),
                      const SizedBox(width: 8),
                      Expanded(child: _buildTextField(_customerNameController, 'T√™n')),
                      const SizedBox(width: 8),
                      Expanded(child: _buildTextField(_phoneController, 'S·ªë ƒëi·ªán tho·∫°i')),
                    ],
                  ),

                  const SizedBox(height: 12),

                  // === Ghi ch√∫ ===
                  Row(
                    children: [
                      Expanded(child: _buildTextField(_noteController, 'Ghi ch√∫')),
                    ],
                  ),

                  const SizedBox(height: 12),

                  // === Danh s√°ch d·ªãch v·ª•/s·∫£n ph·∫©m ===
                  Expanded(
                    child: SingleChildScrollView(
                      child: buildServiceSelection(),
                    ),
                  ),
                ],
              ),
            ),

            // === TI√äU ƒê·ªÄ V√Ä N√öT ƒê√ìNG ===
            Positioned(
              top: 0,
              left: 0,
              right: 0,
              child: Container(
                height: 48,
                decoration: const BoxDecoration(
                  borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
                ),
                child: Stack(
                  children: [
                    Center(
                      child: Text(
                        widget.schedule != null ? 'C·∫≠p nh·∫≠t phi·∫øu h·∫πn' : 'Th√™m phi·∫øu h·∫πn',
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Positioned(
                      right: 8,
                      top: 8,
                      child: InkWell(
                        onTap: () {
                          Navigator.of(context).pop(); // ƒê√≥ng dialog
                        },
                        child: const Icon(Icons.close, size: 24),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    ),
  );
}



  // C√°c controller, h√†m _buildTextField, _buildIconButton, _buildScheduleTable b·∫°n t·ª± th√™m v√†o file n√†y nh√©.
  Widget _buildTextField(TextEditingController controller, String hint,
      {int maxLines = 1}) {
    return TextField(
      controller: controller,
      maxLines: maxLines,
      decoration: InputDecoration(
        isDense: true,
        contentPadding: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),
        hintText: hint,
        hintStyle: const TextStyle(color: Colors.black54),
        border: const OutlineInputBorder(
          borderRadius: BorderRadius.all(Radius.circular(12)),
          borderSide: BorderSide(width: 1.5), // TƒÉng ƒë·ªô d√†y vi·ªÅn
        ),
        enabledBorder: const OutlineInputBorder(
          borderRadius: BorderRadius.all(Radius.circular(12)),
          borderSide: BorderSide(width: 1.5, color: Colors.grey), // Vi·ªÅn khi kh√¥ng focus
        ),
        focusedBorder: const OutlineInputBorder(
          borderRadius: BorderRadius.all(Radius.circular(12)),
          borderSide: BorderSide(width: 2, color: Colors.blue), // Vi·ªÅn khi focus
        ),
      ),
    );
  }

  Widget _buildIconButton(IconData icon, VoidCallback onPressed) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: IconButton(
        icon: Icon(icon),
        onPressed: onPressed,
        tooltip: icon == Icons.search
            ? 'T√¨m ki·∫øm'
            : 'L∆∞u',
      ),
    );
  }


 Widget buildServiceSelection() {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      const Padding(
        padding: EdgeInsets.symmetric(vertical: 8),
        child: Text(
          'Ch·ªçn d·ªãch v·ª•:',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
      ),
      Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: List.generate(4, (colIndex) {
          final columns = services.sublist(colIndex * 10, (colIndex + 1) * 10);

          return Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: List.generate(columns.length, (itemIndex) {
                final globalIndex = colIndex * 10 + itemIndex;

                return CheckboxListTile(
                  contentPadding: EdgeInsets.zero,
                  dense: true,
                  title: Text(
                    columns[itemIndex]['name']!,
                    style: const TextStyle(fontSize: 14),
                  ),
                  value: selected[globalIndex],
                  controlAffinity: ListTileControlAffinity.leading,
                  onChanged: (value) {
                    setState(() {
                      selected[globalIndex] = value!;
                    });
                  },
                );
              }),
            ),
          );
        }),
      ),
    ],
  );
}

}
